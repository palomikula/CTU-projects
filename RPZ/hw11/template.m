% Init MatConvNet framework
MCNPath = 'matconvnet-1.0-beta23';
run(fullfile(MCNPath, 'matlab/vl_setupnn'))

% load data
load imdb

% normalise the data
imdb.images.data = imdb.images.data / 255;

% training and validation sets
imdb.images.set = [1 * ones(1, 59000), 2 * ones(1, 1000)];

%--------------------------------------------------------------------
% %% 1. Softmax with SGD
% % --------------------------------------------------------------------
delete expDir/*
clear net;

net.layers = {} ;
net.layers{end+1} = struct('name', 'conv1', ...
			   'type', 'conv', ...
			   'weights', {{1e-2*randn(3,3,1,30,'single'), zeros(1, 30,'single')}}, ...
			   'stride', 2, ...
			   'pad', 1) ;
net.layers{end+1} = struct('name', 'relu1', ...
			   'type', 'relu') ;
net.layers{end+1} = struct('name', 'conv1', ...
			   'type', 'conv', ...
			   'weights', {{1e-2*randn(3,3,30,60,'single'), zeros(1, 60,'single')}}, ...
			   'stride', 1, ...
			   'pad', 0) ;
net.layers{end+1} = struct('name', 'relu1', ...
			   'type', 'relu') ;           
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0);
net.layers{end+1} = struct('name', 'full', ...
			   'type', 'conv', ...
			   'weights', {{1e-2*randn(6,6,60,30,'single'), zeros(1, 30,'single')}}, ...
			   'stride', 1, ...
			   'pad', 0);
           net.layers{end+1} = struct('name', 'relu1', ...
			   'type', 'relu') ;
net.layers{end+1} = struct('name', 'full', ...
			   'type', 'conv', ...
			   'weights', {{1e-2*randn(1,1,30,10,'single'), zeros(1, 10,'single')}}, ...
			   'stride', 1, ...
			   'pad', 0);           
net.layers{end+1} = struct('type', 'softmaxloss') ;

 
net = vl_simplenn_tidy(net);
vl_simplenn_display(net)
 
[net, info] = cnn_train(net, imdb, @getSimpleNNBatch, 'batchSize', 5000, 'numEpochs', 100, 'expDir', 'expDir','learningRate',0.01);          
net.layers{end}.type = 'softmax';
save('my_cnn.mat', 'net');
